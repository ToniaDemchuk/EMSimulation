@page

@{
	ViewData["Title"] = "DDA";
}

<div class="row">
	<div id="app" class="col-8">
		<h3>DDA</h3>

		<form>
			<fieldset :disabled="!signalrStarted || inProgress">
				<div class="form-group">
					<div class="custom-file">
						<label for="meshInput" class="custom-file-label">{{ meshFileName ?? 'Mesh' }}</label>
						<input type="file" class="custom-file-input" accept=".fds" @@change="meshSelected" id="meshInput">
					</div>
				</div>

				<h6>Config:</h6>
				<div class="form-row">
					<div class="form-group col-4">
						<label for="config-lower">Lower:</label>
						<input v-model.number="config.lower" class="form-control" id="config-lower" />
					</div>
					<div class="form-group col-4">
						<label for="config-upper">Upper:</label>
						<input v-model.number="config.upper" class="form-control" id="config-upper" />
					</div>
					<div class="form-group col-4">
						<label for="config-count">Count:</label>
						<input v-model.number="config.count" type="number" class="form-control" id="config-count" />
					</div>
				</div>

				<h6>Wave:</h6>
				<div class="form-row">
					<div class="form-group col-4">
						<label for="wave-radius">Radius:</label>
						<input v-model.number="wave.radius" class="form-control" id="wave-radius" />
					</div>
					<div class="form-group col-4">
						<label for="wave-polar">Polar:</label> {{ wave.polar }}
						<input v-model.number="wave.polar" type="range" class="form-control-range" min="0" max="180" id="wave-polar" />
					</div>
					<div class="form-group col-4">
						<label for="wave-azimuth">Azimuth:</label> {{ wave.azimuth }}
						<input v-model.number="wave.azimuth" type="range" class="form-control-range"  min="-180" max="180" id="wave-azimuth" />
					</div>
				</div>

				<button type="submit" class="btn btn-success" :disabled="!meshFile" @@click.prevent="startCalculation">
					Calculate
					<span v-show="inProgress" class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
				</button>
			</fieldset>
		</form>

		<template v-if="inProgress">
		<h6>Progress:</h6>
		<progress-chart :chart-data="chartData" :options="options" :height="10" style="border: 2px solid green;"></progress-chart>
		</template>

		<template v-if="result">
		<h6>Result:</h6>
		<result-chart :chart-data="resultChartData" :options="resultOptions"></result-chart>

		<h6>Download:</h6>
		<button class="btn btn-success" @@click="download">Download</button>
		</template>
	</div>

	
		<div class="col-4" id="mygraph"></div>

</div>

<script src="https://unpkg.com/chart.js@2.9.3/dist/Chart.js"></script>
<script src="https://unpkg.com/vue@2.6.12/dist/vue.js"></script>
<script src="https://unpkg.com/vue-chartjs@3.5.1/dist/vue-chartjs.js"></script>
<script src="https://unpkg.com/@@microsoft/signalr@3.1.8/dist/browser/signalr.js"></script>

<script type="application/javascript">
	const ProgressChart = {
		extends: VueChartJs.Bar,
		mixins: [VueChartJs.mixins.reactiveProp],
		props: ['options'],
		mounted () {
			this.renderChart(this.chartData, this.options)
		}
	}

	const ResultChart = {
		extends: VueChartJs.Line,
		mixins: [VueChartJs.mixins.reactiveProp],
		props: ['options'],
		mounted () {
			this.renderChart(this.chartData, this.options)
		}
	}

	const app = new Vue({
		el: '#app',
		components: {
			ProgressChart,
			ResultChart
		},
		data () {
			return  {
				signalrStarted: false,
				inProgress: false,
				meshFileName: null,
				meshFile: null,
				config: {
					lower: 300.0e-9,
					upper: 440.0e-9,
					count: 211
				},
				wave: {
					radius: 1,
					polar: 90,
					azimuth: 0
				},
				progress: [],
				result: null,
				objMesh: null
			}
		},
		created () {
			this.connection = new signalR.HubConnectionBuilder()
				.withUrl('/ddaHub')
				.configureLogging(signalR.LogLevel.Trace)
				.build()

			this.connection.start()
				.then(() => {
					 this.signalrStarted = true
				})
		},
		computed: {
			step () {
				return (this.config.upper - this.config.lower) / this.config.count
			},
			options () {
				return {
					legend: {
						display: false
					},
					scales: {
						yAxes: [{
							display: false
						}],
						xAxes: [{
							display: false
						}]
					}
				}
			},
			chartData () {
				return {
					labels: new Array(this.config.count).fill(0).map((_, i) => this.config.lower + this.step * i),
					datasets: [{
						label: 'test',
						barPercentage: 1.0,
						backgroundColor: 'green',
						borderWidth: 0,
						data: new Array(this.config.count)
							.fill(0)
							.map((_, i) => {
								const x = this.config.lower + this.step * i
								return { x, y: this.progress.some(wave => Math.abs(wave - x) < this.step / 1.5) ? 1 : 0 }
							})
					}]
				}
			},
			resultOptions () {
				return {
				}
			},
			resultChartData () {
				const keys = Object
					.keys(this.result)
					.map(str => ({ key: str, number: Number(str) }))
					.sort((a, b) => a.number - b.number)
					.map(obj => obj.key)

				return {
					labels: keys,
					datasets: [{
						label: 'extinction',
						data: keys
							.map(key => ({ x: key, y: this.result[key].crossSectionExtinction }))
					}, {
						label: 'effective extinction',
						data: keys
							.map(key => ({ x: key, y: this.result[key].effectiveCrossSectionExtinction }))
					}]
				}
			}
		},
		methods: {
			async meshSelected (e) {
				this.meshFileName = e.target.files[0].name
				this.meshFile = await e.target.files[0].text()

				this.objMesh = await this.connection.invoke(
					'GetMesh',
					this.meshFile
				);

				var data = new vis.DataSet();
				var maxx = 0
				var minx = 1000000
				this.objMesh.forEach(v => {
					if (v.i > maxx) {
						maxx = v.i;
					}
					if (v.i < minx) {
						minx = v.i;
					}
				});

				this.objMesh.forEach(v => {
					data.add({
						x: v.i,
						y: v.j,
						z: v.k,
						style: 1
					});
				});

				// specify options
				var options = {
					width:  '300px',
					height: '300px',
					style: 'dot-size',
					showPerspective: false,
					showGrid: true,
					showLegend: false,
					keepAspectRatio: true,
					verticalRatio: 1.0,
					cameraPosition: {
						horizontal: -0.54,
						vertical: 0.5,
						distance: 1.6
					},
					dotSizeRatio: 0.7/(maxx-minx),
					dotSizeMinFraction: 0.75,
					dotSizeMaxFraction: 1
				};

				// create a graph3d
				var container = document.getElementById('mygraph');
				graph3d = new vis.Graph3d(container, data, options);
			},
			async startCalculation () {
				this.inProgress = true

				this.result = null
				this.progress = []

				this.connection.on('Progress', (wave, stepResult) => {
					this.progress.push(wave)
					this.result = this.result ?? {}
					Vue.set(this.result, wave, stepResult)
				});

				this.result = await this.connection.invoke(
					'StartCalculation',
					this.meshFile,
					this.wave,
					{
						polar: 0,
						azimuth: 0
					},
					this.config);

				this.inProgress = false
			},
			download () {
				const element = document.createElement('a');
				const data = Object
					.entries(this.result)
					.map(([key, value]) => [key, value.crossSectionExtinction, value.effectiveCrossSectionExtinction].join(', '))
					.join('\n')

				const file = 'wave, crossSectionExtinction, effectiveCrossSectionExtinction\n' + data

				element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(file))
				element.setAttribute('download', 'dda-result.csv');

				element.style.display = 'none';
				document.body.appendChild(element);

				element.click();

				document.body.removeChild(element);
			}
		}
	})
</script>
