@page

@{
	ViewData["Title"] = "FDTD";
}

<div>
	<div id="app">
		<h3>FDTD</h3>

		<form>
			<fieldset :disabled="!signalrStarted || inProgress">
				<div class="form-group">
					<div class="custom-file">
						<label for="meshInput" class="custom-file-label">{{ meshFileName ?? 'Mesh' }}</label>
						<input type="file" class="custom-file-input" accept=".fds" @@change="meshSelected" id="meshInput">
					</div>
				</div>

				<h6>Config:</h6>
				<div class="form-group">
					<label for="num-steps">NumSteps:</label>
					<input v-model.number="numSteps" class="form-control" id="num-steps" />
				</div>
				<div class="form-row">
					<div class="form-group col-4">
						<label for="config-lower">Lower:</label>
						<input v-model.number="config.lower" class="form-control" id="config-lower" />
					</div>
					<div class="form-group col-4">
						<label for="config-upper">Upper:</label>
						<input v-model.number="config.upper" class="form-control" id="config-upper" />
					</div>
					<div class="form-group col-4">
						<label for="config-count">Count:</label>
						<input v-model.number="config.count" type="number" class="form-control" id="config-count" />
					</div>
				</div>

				<h6>Wave:</h6>
				<div class="form-row">
					<div class="form-group col-4">
						<label for="wave-radius">Radius:</label>
						<input v-model.number="wave.radius" class="form-control" id="wave-radius" />
					</div>
					<div class="form-group col-4">
						<label for="wave-polar">Polar:</label>
						<input v-model.number="wave.radius" class="form-control" id="wave-radius" />
					</div>
					<div class="form-group col-4">
						<label for="wave-azimuth">Azimuth:</label>
						<input v-model.number="wave.azimuth" type="number" class="form-control" id="wave-azimuth" />
					</div>
				</div>

				<input type="submit" class="btn btn-success"  :disabled="!meshFile" value="Calculate" @@click.prevent="startCalculation">
			</fieldset>
		</form>

		<template v-if="inProgress">
		<h6>Progress:</h6>
		<progress-chart :chart-data="chartData" :options="options" :height="10" style="border: 2px solid green;"></progress-chart>
		</template>

		<template v-if="result">
		<h6>Result:</h6>
		<result-chart :chart-data="resultChartData" :options="resultOptions"></result-chart>

		<h6>Download:</h6>
		<button class="btn btn-success" @@click="download">Download</button>
		</template>
	</div>
			<div id="mygraph"></div>
</div>

<script src="https://unpkg.com/chart.js@2.9.3/dist/Chart.js"></script>
<script src="https://unpkg.com/vue@2.6.12/dist/vue.js"></script>
<script src="https://unpkg.com/vue-chartjs@3.5.1/dist/vue-chartjs.js"></script>
<script src="https://unpkg.com/@@microsoft/signalr@3.1.8/dist/browser/signalr.js"></script>

<script type="application/javascript">
	const ProgressChart = {
		extends: VueChartJs.Bar,
		mixins: [VueChartJs.mixins.reactiveProp],
		props: ['options'],
		mounted () {
			this.renderChart(this.chartData, this.options)
		}
	}

	const ResultChart = {
		extends: VueChartJs.Line,
		mixins: [VueChartJs.mixins.reactiveProp],
		props: ['options'],
		mounted () {
			this.renderChart(this.chartData, this.options)
		}
	}

	const app = new Vue({
		el: '#app',
		components: {
			ProgressChart,
			ResultChart
		},
		data () {
			return  {
				signalrStarted: false,
				inProgress: false,
				meshFileName: null,
				meshFile: null,
				config: {
					lower: 100.0e-9,
					upper: 400.0e-9,
					count: 311
				},
				wave: {
					radius: 1,
					polar: 90,
					azimuth: 0
				},
				numSteps: 150,
				progress: [],
				result: null
			}
		},
		created () {
			this.connection = new signalR.HubConnectionBuilder()
				.withUrl('/fdtdHub')
				.configureLogging(signalR.LogLevel.Trace)
				.build()

			this.connection.start()
				.then(() => {
					 this.signalrStarted = true
				})

		},
		computed: {
			options () {
				return {
					legend: {
						display: false
					},
					scales: {
						yAxes: [{
							display: false
						}],
						xAxes: [{
							display: false
						}]
					}
				}
			},
			chartData () {
				return {
					labels: new Array(this.numSteps).fill(0).map((_, i) => i),
					datasets: [{
						label: 'test',
						barPercentage: 1.0,
						backgroundColor: 'green',
						borderWidth: 0,
						data: new Array(this.config.count)
							.fill(0)
							.map((_, i) => {
								const x = i
								return { x, y: this.progress.some(time => time === x) ? 1 : 0 }
							})
					}]
				}
			},
			resultOptions () {
				return {
				}
			},
			resultChartData () {
				return {
					labels: Object.keys(this.result),
					datasets: [{
						label: 'absorption',
						data: Object
							.entries(this.result)
							.map(([key, value]) => ({ x: key, y: value.crossSectionAbsorption }))
					}, {
						label: 'effective absorption',
						data: Object
							.entries(this.result)
							.map(([key, value]) => ({ x: key, y: value.effectiveCrossSectionAbsorption }))
					}]
				}
			}
		},
		methods: {
			async meshSelected (e) {
				this.meshFileName = e.target.files[0].name
				this.meshFile = await e.target.files[0].text()
			},
			async startCalculation () {
				this.inProgress = true

				this.result = null
				this.progress = []

				this.connection.on('ProgressField', (time, values) => {
					this.progress.push(time)

					this.drawVisualization(values, time);
				});

				this.result = await this.connection.invoke(
					'StartCalculation',
					this.meshFile,
					this.numSteps,
					this.wave,
					this.config);

				this.inProgress = false
			},


			// Called when the Visualization API is loaded.
			drawVisualization(values, time) {
					
				var data = new vis.DataSet();

				for (var i = 0; i < values.length; i++) {
					var value = values[i];
					data.add({id:i,x:value.x,y:value.y,z:value.z,style:value.z});
				}

				// specify options
				var options = {
					width:  '1000px',
					height: '1000px',
					style: 'surface',
					showPerspective: true,
					showGrid: true,
					showShadow: false,
					keepAspectRatio: true,
					verticalRatio: 0.5,
					zLabel: `T = ${time}`,
					zMax: 5e-17,
					cameraPosition: {
						horizontal: 1.1,
						vertical: 0.4,
						distance: 1.7
					}
				};
				// Instantiate our graph object.
				var container = document.getElementById('mygraph');
				var graph = new vis.Graph3d(container, data, options);
			},
  
			download () {
				const element = document.createElement('a');
				const data = Object
					.entries(this.result)
					.map(([key, value]) => [key, value.crossSectionAbsorption, value.effectiveCrossSectionAbsorption].join(', '))
					.join('\n')

				const file = 'wave, crossSectionAbsorption, effectiveCrossSectionAbsorption\n' + data

				element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(file))
				element.setAttribute('download', 'fdtd-result.csv');

				element.style.display = 'none';
				document.body.appendChild(element);

				element.click();

				document.body.removeChild(element);
			}
		}
	})
</script>
